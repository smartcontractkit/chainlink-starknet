// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

// CleanupBalance provides a mock function with given fields: contractAddress, alias, networkId, networkName, chainID
func (_m *Metrics) CleanupBalance(contractAddress string, alias string, networkId string, networkName string, chainID string) {
	_m.Called(contractAddress, alias, networkId, networkName, chainID)
}

// CleanupProxy provides a mock function with given fields: proxyContractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *Metrics) CleanupProxy(proxyContractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(proxyContractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// CleanupReportObservations provides a mock function with given fields: accountAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *Metrics) CleanupReportObservations(accountAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(accountAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// CleanupTransmissionGasPrice provides a mock function with given fields: contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *Metrics) CleanupTransmissionGasPrice(contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// SetBalance provides a mock function with given fields: answer, contractAddress, alias, networkId, networkName, chainID
func (_m *Metrics) SetBalance(answer float64, contractAddress string, alias string, networkId string, networkName string, chainID string) {
	_m.Called(answer, contractAddress, alias, networkId, networkName, chainID)
}

// SetProxyAnswers provides a mock function with given fields: answer, proxyContractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *Metrics) SetProxyAnswers(answer float64, proxyContractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(answer, proxyContractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// SetProxyAnswersRaw provides a mock function with given fields: answer, proxyContractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *Metrics) SetProxyAnswersRaw(answer float64, proxyContractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(answer, proxyContractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// SetReportObservations provides a mock function with given fields: answer, accountAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *Metrics) SetReportObservations(answer float64, accountAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(answer, accountAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// SetTransmissionGasPrice provides a mock function with given fields: answer, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *Metrics) SetTransmissionGasPrice(answer float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(answer, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

type mockConstructorTestingTNewMetrics interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetrics(t mockConstructorTestingTNewMetrics) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
