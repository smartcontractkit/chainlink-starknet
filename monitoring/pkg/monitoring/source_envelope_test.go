package monitoring

import (
	"context"
	"math/big"
	"testing"
	"time"

	starknetutils "github.com/NethermindEth/starknet.go/utils"
	"github.com/smartcontractkit/libocr/offchainreporting2/types"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"

	relayMonitoring "github.com/smartcontractkit/chainlink-common/pkg/monitoring"

	"github.com/smartcontractkit/chainlink-starknet/relayer/pkg/chainlink/ocr2"

	ocr2Mocks "github.com/smartcontractkit/chainlink-starknet/relayer/pkg/chainlink/ocr2/mocks"
	"github.com/smartcontractkit/chainlink-starknet/relayer/pkg/starknet"
	starknetMocks "github.com/smartcontractkit/chainlink-starknet/relayer/pkg/starknet/mocks"
)

func TestEnvelopeSource(t *testing.T) {
	// This test makes sure that the mapping between the response from the ocr2.Client
	// method calls and the output of the Envelope source is correct.

	chainConfig := generateChainConfig()
	feedConfig := generateFeedConfig()

	ocr2Reader := ocr2Mocks.NewOCR2Reader(t)
	ocr2Reader.On(
		"LatestRoundData",
		mock.Anything, // ctx
		feedConfig.ContractAddress,
	).Return(ocr2ClientLatestRoundDataResponse, nil).Once()
	ocr2Reader.On(
		"NewTransmissionsFromEventsAt",
		mock.Anything, // ctx
		feedConfig.ContractAddress,
		ocr2ClientLatestRoundDataResponse.BlockNumber,
	).Return(ocr2ClientNewTransmissionEventAtResponse, nil).Once()
	ocr2Reader.On(
		"LatestConfigDetails",
		mock.Anything, // ctx
		feedConfig.ContractAddress,
	).Return(ocr2ClientLatestConfigDetailsResponse, nil).Once()
	ocr2Reader.On(
		"ConfigFromEventAt",
		mock.Anything, // ctx
		feedConfig.ContractAddress,
		ocr2ClientLatestConfigDetailsResponse.Block,
	).Return(ocr2ClientConfigFromEventAtResponse, nil).Once()
	ocr2Reader.On(
		"LinkAvailableForPayment",
		mock.Anything, // ctx
		feedConfig.ContractAddress,
	).Return(ocr2ClientLinkAvailableForPaymentResponse, nil).Once()

	baseReader := starknetMocks.NewReader(t)
	ocr2Reader.On("BaseReader").Return(baseReader)
	baseReader.On(
		"CallContract",
		mock.Anything, // ctx
		starknet.CallOps{
			ContractAddress: chainConfig.GetLinkTokenAddress(),
			Selector:        "balanceOf",
			Calldata: []string{
				starknetutils.HexToBN(feedConfig.ContractAddress).String(),
			},
		},
	).Return(starknetReaderCallContractBalanceOfResponse, nil)

	factory := NewEnvelopeSourceFactory(ocr2Reader)
	source, err := factory.NewSource(chainConfig, feedConfig)
	require.NoError(t, err)
	rawEnvelope, err := source.Fetch(context.Background())
	require.NoError(t, err)
	envelope, ok := rawEnvelope.(relayMonitoring.Envelope)
	require.True(t, ok)

	require.Equal(t, expectedEnvelope, envelope)
}

var (
	ocr2ClientLatestRoundDataResponse = ocr2.RoundData{
		RoundID:     0xf5b,
		Answer:      bigIntFromString("3618502788666131213697322783095070105623107215331596699973092056134972020481"),
		BlockNumber: 0xe07,
		StartedAt:   time.Date(2022, time.September, 27, 18, 50, 0, 0, time.Local),
		UpdatedAt:   time.Date(2022, time.September, 27, 18, 51, 0, 0, time.Local),
	}
	ocr2ClientNewTransmissionEventAtResponse = []ocr2.NewTransmissionEvent{
		{
			RoundId:         0xf5b,
			LatestAnswer:    bigIntFromString("-900000000"),
			Transmitter:     starknetutils.StrToFelt("634447934223750826572902672583054702307815157196919304685470566142330202833"),
			LatestTimestamp: time.Date(2022, time.September, 27, 18, 51, 0, 0, time.Local),
			Observers:       []uint8{0x1, 0x2, 0x3, 0x4},
			ObservationsLen: 0x4,
			Observations: []*big.Int{
				bigIntFromString("3618502788666131213697322783095070105623107215331596699973092056134972020481"),
				bigIntFromString("3618502788666131213697322783095070105623107215331596699973092056134972020481"),
				bigIntFromString("3618502788666131213697322783095070105623107215331596699973092056134972020481"),
				bigIntFromString("3618502788666131213697322783095070105623107215331596699973092056134972020481"),
			},
			JuelsPerFeeCoin: big.NewInt(451000),
			GasPrice:        big.NewInt(1),
			ConfigDigest:    types.ConfigDigest{0x0, 0x4, 0x18, 0xe5, 0x44, 0xab, 0xa8, 0x18, 0x15, 0xa5, 0x2b, 0xf0, 0x11, 0x58, 0xc6, 0x9b, 0x38, 0x8a, 0x48, 0x9f, 0x76, 0xd, 0xd8, 0x3d, 0x84, 0x3f, 0x1d, 0x31, 0x22, 0xdb, 0x78, 0xa},
			Epoch:           0x519,
			Round:           0x5,
			Reimbursement:   big.NewInt(0),
		},
	}
	ocr2ClientLatestConfigDetailsResponse = ocr2.ContractConfigDetails{
		Block:  0x11,
		Digest: types.ConfigDigest{0x0, 0x4, 0x18, 0xe5, 0x44, 0xab, 0xa8, 0x18, 0x15, 0xa5, 0x2b, 0xf0, 0x11, 0x58, 0xc6, 0x9b, 0x38, 0x8a, 0x48, 0x9f, 0x76, 0xd, 0xd8, 0x3d, 0x84, 0x3f, 0x1d, 0x31, 0x22, 0xdb, 0x78, 0xa},
	}
	ocr2ClientConfigFromEventAtResponse = ocr2.ContractConfig{
		Config: types.ContractConfig{
			ConfigDigest: types.ConfigDigest{0x0, 0x4, 0x18, 0xe5, 0x44, 0xab, 0xa8, 0x18, 0x15, 0xa5, 0x2b, 0xf0, 0x11, 0x58, 0xc6, 0x9b, 0x38, 0x8a, 0x48, 0x9f, 0x76, 0xd, 0xd8, 0x3d, 0x84, 0x3f, 0x1d, 0x31, 0x22, 0xdb, 0x78, 0xa},
			ConfigCount:  0x1,
			Signers: []types.OnchainPublicKey{
				types.OnchainPublicKey{0x6, 0x43, 0x41, 0xfa, 0xc3, 0x1, 0xc6, 0x2c, 0x38, 0xa9, 0xef, 0xdb, 0x86, 0xf6, 0xa2, 0x5a, 0x34, 0xd2, 0x4, 0x4f, 0x29, 0x2e, 0x94, 0xfb, 0xe4, 0x78, 0xa6, 0x67, 0x19, 0xb3, 0x80, 0x9e},
				types.OnchainPublicKey{0x1, 0xe2, 0xe1, 0x45, 0x47, 0x3, 0x7d, 0xb0, 0xd2, 0xe, 0xc6, 0xc9, 0x4b, 0xc7, 0x91, 0xea, 0xf2, 0xc9, 0x98, 0xad, 0x92, 0x79, 0xbb, 0xd, 0x21, 0x80, 0x15, 0x14, 0xd0, 0x6f, 0xa5, 0x7e},
				types.OnchainPublicKey{0x3, 0xb6, 0xcb, 0xd7, 0xbd, 0x52, 0x2d, 0xc8, 0xb0, 0xb4, 0x15, 0x3d, 0x60, 0x44, 0xec, 0xa7, 0x7e, 0x3e, 0xcf, 0xde, 0xe0, 0xc9, 0x5d, 0x20, 0x75, 0x50, 0x61, 0xf4, 0xbc, 0x7b, 0xf5, 0x4d},
				types.OnchainPublicKey{0x2, 0x4a, 0xa1, 0x21, 0x5b, 0xf4, 0xa3, 0xbb, 0x13, 0xea, 0x19, 0x57, 0x74, 0x28, 0xb7, 0xbe, 0xb5, 0xb9, 0x28, 0xb5, 0x74, 0x96, 0x78, 0xfa, 0x46, 0x87, 0x3b, 0x62, 0x7b, 0x22, 0x2a, 0x14},
				types.OnchainPublicKey{0x2, 0xa9, 0xc8, 0x4f, 0x88, 0x14, 0x17, 0xb5, 0xc9, 0xd1, 0x3b, 0x80, 0x2a, 0xc9, 0x93, 0xc5, 0x2c, 0x82, 0x88, 0x62, 0x32, 0xf7, 0x4e, 0x47, 0x5a, 0x92, 0xcc, 0x1a, 0xa, 0x1, 0x10, 0xda},
			},
			Transmitters: []types.Account{
				"0x033c95af529827a2372743bfc820b4d0bd08605fda5e089d1a7ad3a33caa48fc",
				"0x05e457e084ff8e7279985ffb7ad7a65a6adfa8485e7d5d615c015268d5aa9971",
				"0x0692a71d868ee9fc22091d8f73c16dabaf9219fa74c4bcc7d385f398949ba8d2",
				"0x01232b74b82e490f373453baebe7e217cc6d33d798824a04f8274fa83bc2acd4",
				"0x016715b5cc943835f196b7caf5a8aeb0e85b3f975dc43c14c90d0376e87eead1",
			},
			F:                     0x1,
			OnchainConfig:         []uint8{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xb7, 0x89, 0x18, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x17, 0x48, 0x76, 0xe8, 0x0},
			OffchainConfigVersion: 0x2,
			OffchainConfig:        []uint8{0x8, 0x80, 0xa0, 0xd9, 0xe6, 0x1d, 0x10, 0x80, 0xd8, 0x8e, 0xe1, 0x6f, 0x18, 0x80, 0xbc, 0xc1, 0x96, 0xb, 0x20, 0x80, 0xca, 0xb5, 0xee, 0x1, 0x28, 0x80, 0x90, 0xdf, 0xc0, 0x4a, 0x30, 0x5, 0x3a, 0x2, 0x1, 0x2, 0x42, 0x20, 0xe9, 0x4f, 0x24, 0x4a, 0xcd, 0x86, 0x7d, 0xa5, 0x72, 0x54, 0x35, 0x57, 0x82, 0xb7, 0x1d, 0xb4, 0x50, 0x83, 0xd3, 0x67, 0xa7, 0xef, 0x23, 0x71, 0x5e, 0xb5, 0xce, 0x64, 0x38, 0xdf, 0x16, 0x1b, 0x42, 0x20, 0x34, 0xb6, 0xb5, 0xd, 0x9a, 0x47, 0xa2, 0x25, 0xe7, 0x91, 0xb3, 0x67, 0x7a, 0x1e, 0xd, 0x12, 0x2b, 0xa0, 0xc, 0xe9, 0x60, 0xd3, 0x7c, 0x76, 0x46, 0xec, 0x84, 0xcd, 0xd6, 0xfa, 0x9c, 0x48, 0x42, 0x20, 0x6a, 0xbc, 0xb4, 0x9d, 0xc7, 0xf4, 0xa9, 0x2f, 0xc4, 0x50, 0x89, 0x82, 0xa8, 0xa, 0xc1, 0x54, 0x23, 0x79, 0x8a, 0x2d, 0xe, 0x47, 0x1e, 0x95, 0xf4, 0x1e, 0x30, 0xeb, 0x68, 0x85, 0x29, 0xa6, 0x42, 0x20, 0x9b, 0xab, 0xa6, 0x36, 0x27, 0xbf, 0xa5, 0x31, 0x26, 0x9f, 0x32, 0x40, 0xb4, 0xc4, 0xe9, 0x8e, 0x86, 0xbc, 0xd5, 0x99, 0x83, 0xc5, 0x27, 0x31, 0x5f, 0x7a, 0xd1, 0x2f, 0x51, 0x5d, 0xd8, 0xfc, 0x42, 0x20, 0x72, 0xd7, 0x97, 0xfe, 0x3c, 0x8, 0xd8, 0x97, 0xfe, 0xe8, 0xdd, 0xa3, 0xa9, 0x40, 0x66, 0xa3, 0x4d, 0xa7, 0x27, 0x81, 0x4f, 0xf, 0x1f, 0x6c, 0x72, 0x22, 0xba, 0xdc, 0x52, 0x18, 0xcf, 0xb2, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x45, 0x7a, 0x66, 0x67, 0x38, 0x70, 0x32, 0x71, 0x58, 0x42, 0x38, 0x74, 0x77, 0x37, 0x6b, 0x42, 0x59, 0x72, 0x76, 0x75, 0x4d, 0x6e, 0x75, 0x47, 0x70, 0x66, 0x75, 0x79, 0x71, 0x59, 0x67, 0x4a, 0x50, 0x76, 0x78, 0x70, 0x77, 0x69, 0x62, 0x73, 0x50, 0x68, 0x67, 0x5a, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4c, 0x5a, 0x4a, 0x58, 0x71, 0x44, 0x59, 0x56, 0x32, 0x48, 0x45, 0x53, 0x35, 0x4a, 0x76, 0x6b, 0x4b, 0x35, 0x72, 0x6f, 0x65, 0x39, 0x77, 0x67, 0x44, 0x38, 0x4c, 0x67, 0x6d, 0x73, 0x69, 0x36, 0x51, 0x69, 0x71, 0x6a, 0x6d, 0x46, 0x31, 0x4b, 0x38, 0x38, 0x4d, 0x57, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x39, 0x73, 0x45, 0x63, 0x45, 0x33, 0x50, 0x32, 0x79, 0x6d, 0x4b, 0x39, 0x42, 0x5a, 0x50, 0x45, 0x51, 0x43, 0x47, 0x35, 0x6d, 0x6f, 0x67, 0x59, 0x4b, 0x48, 0x63, 0x68, 0x71, 0x48, 0x53, 0x69, 0x57, 0x52, 0x45, 0x4c, 0x68, 0x4a, 0x52, 0x5a, 0x32, 0x69, 0x69, 0x56, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x45, 0x33, 0x56, 0x76, 0x4b, 0x79, 0x47, 0x70, 0x6d, 0x74, 0x52, 0x36, 0x55, 0x48, 0x6b, 0x51, 0x45, 0x75, 0x31, 0x43, 0x73, 0x70, 0x51, 0x47, 0x78, 0x4c, 0x67, 0x55, 0x56, 0x77, 0x4b, 0x64, 0x4c, 0x64, 0x4b, 0x46, 0x71, 0x4a, 0x35, 0x4e, 0x52, 0x74, 0x47, 0x74, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x52, 0x6b, 0x62, 0x7a, 0x79, 0x6b, 0x41, 0x48, 0x38, 0x4b, 0x55, 0x48, 0x57, 0x69, 0x52, 0x77, 0x66, 0x31, 0x45, 0x73, 0x55, 0x33, 0x46, 0x65, 0x67, 0x37, 0x73, 0x53, 0x57, 0x42, 0x65, 0x56, 0x43, 0x6b, 0x77, 0x6e, 0x4e, 0x57, 0x46, 0x57, 0x74, 0x36, 0x5a, 0x73, 0x52, 0x0, 0x60, 0x80, 0x94, 0xeb, 0xdc, 0x3, 0x68, 0x80, 0x84, 0xaf, 0x5f, 0x70, 0x80, 0x84, 0xaf, 0x5f, 0x78, 0x80, 0x84, 0xaf, 0x5f, 0x82, 0x1, 0x9e, 0x1, 0xa, 0x20, 0x54, 0x42, 0xd5, 0xda, 0xdc, 0x41, 0xfc, 0xf, 0xf1, 0xca, 0xc, 0x31, 0x37, 0x72, 0xe3, 0xed, 0xb7, 0xb7, 0xfd, 0x1e, 0x79, 0x49, 0x5b, 0x8e, 0xa6, 0x69, 0x94, 0xb6, 0x7e, 0xf9, 0xed, 0x40, 0x12, 0x20, 0x62, 0x28, 0x9f, 0xaf, 0xb1, 0x57, 0xd5, 0x85, 0x2a, 0xb2, 0x6c, 0x41, 0x3f, 0xf2, 0xb8, 0x41, 0x45, 0x9b, 0x80, 0x2c, 0x30, 0xe2, 0x4d, 0xf5, 0xf7, 0x9e, 0x85, 0x9c, 0xff, 0xc, 0x21, 0xb4, 0x1a, 0x10, 0x26, 0xbd, 0x1f, 0x5e, 0x13, 0xa5, 0x3d, 0x8b, 0xc2, 0xaf, 0xc1, 0x73, 0x33, 0x6c, 0xa5, 0xa4, 0x1a, 0x10, 0xe, 0x7a, 0xe, 0x77, 0x3a, 0xec, 0x57, 0x35, 0x1d, 0xb7, 0xc, 0xf0, 0x7f, 0x86, 0x74, 0x1, 0x1a, 0x10, 0x45, 0xaa, 0x20, 0x68, 0x4b, 0x49, 0x97, 0x3a, 0x26, 0x22, 0x18, 0x77, 0x9f, 0x67, 0x93, 0x72, 0x1a, 0x10, 0x1c, 0x4d, 0xd7, 0x4a, 0x54, 0xb2, 0xd, 0x92, 0x7, 0xec, 0xcd, 0x95, 0xe6, 0xd4, 0xaf, 0x91, 0x1a, 0x10, 0xea, 0x76, 0xae, 0x49, 0x62, 0x87, 0xef, 0xb7, 0x12, 0x60, 0xfb, 0xd6, 0x13, 0xfe, 0x48, 0xcb},
		},
		ConfigBlock: 0x11,
	}
	starknetReaderCallContractBalanceOfResponse = []string{"0x56bc75e2d63100000", "0x0"}
	ocr2ClientLinkAvailableForPaymentResponse   = bigIntFromString("99999991552000000000")
	expectedEnvelope                            = relayMonitoring.Envelope{
		ConfigDigest:    types.ConfigDigest{0x0, 0x4, 0x18, 0xe5, 0x44, 0xab, 0xa8, 0x18, 0x15, 0xa5, 0x2b, 0xf0, 0x11, 0x58, 0xc6, 0x9b, 0x38, 0x8a, 0x48, 0x9f, 0x76, 0xd, 0xd8, 0x3d, 0x84, 0x3f, 0x1d, 0x31, 0x22, 0xdb, 0x78, 0xa},
		Epoch:           0x519,
		Round:           0x5,
		LatestAnswer:    bigIntFromString("-900000000"),
		LatestTimestamp: time.Date(2022, time.September, 27, 18, 51, 0, 0, time.Local),
		ContractConfig: types.ContractConfig{
			ConfigDigest: types.ConfigDigest{0x0, 0x4, 0x18, 0xe5, 0x44, 0xab, 0xa8, 0x18, 0x15, 0xa5, 0x2b, 0xf0, 0x11, 0x58, 0xc6, 0x9b, 0x38, 0x8a, 0x48, 0x9f, 0x76, 0xd, 0xd8, 0x3d, 0x84, 0x3f, 0x1d, 0x31, 0x22, 0xdb, 0x78, 0xa},
			ConfigCount:  0x1,
			Signers: []types.OnchainPublicKey{
				types.OnchainPublicKey{0x6, 0x43, 0x41, 0xfa, 0xc3, 0x1, 0xc6, 0x2c, 0x38, 0xa9, 0xef, 0xdb, 0x86, 0xf6, 0xa2, 0x5a, 0x34, 0xd2, 0x4, 0x4f, 0x29, 0x2e, 0x94, 0xfb, 0xe4, 0x78, 0xa6, 0x67, 0x19, 0xb3, 0x80, 0x9e},
				types.OnchainPublicKey{0x1, 0xe2, 0xe1, 0x45, 0x47, 0x3, 0x7d, 0xb0, 0xd2, 0xe, 0xc6, 0xc9, 0x4b, 0xc7, 0x91, 0xea, 0xf2, 0xc9, 0x98, 0xad, 0x92, 0x79, 0xbb, 0xd, 0x21, 0x80, 0x15, 0x14, 0xd0, 0x6f, 0xa5, 0x7e},
				types.OnchainPublicKey{0x3, 0xb6, 0xcb, 0xd7, 0xbd, 0x52, 0x2d, 0xc8, 0xb0, 0xb4, 0x15, 0x3d, 0x60, 0x44, 0xec, 0xa7, 0x7e, 0x3e, 0xcf, 0xde, 0xe0, 0xc9, 0x5d, 0x20, 0x75, 0x50, 0x61, 0xf4, 0xbc, 0x7b, 0xf5, 0x4d},
				types.OnchainPublicKey{0x2, 0x4a, 0xa1, 0x21, 0x5b, 0xf4, 0xa3, 0xbb, 0x13, 0xea, 0x19, 0x57, 0x74, 0x28, 0xb7, 0xbe, 0xb5, 0xb9, 0x28, 0xb5, 0x74, 0x96, 0x78, 0xfa, 0x46, 0x87, 0x3b, 0x62, 0x7b, 0x22, 0x2a, 0x14},
				types.OnchainPublicKey{0x2, 0xa9, 0xc8, 0x4f, 0x88, 0x14, 0x17, 0xb5, 0xc9, 0xd1, 0x3b, 0x80, 0x2a, 0xc9, 0x93, 0xc5, 0x2c, 0x82, 0x88, 0x62, 0x32, 0xf7, 0x4e, 0x47, 0x5a, 0x92, 0xcc, 0x1a, 0xa, 0x1, 0x10, 0xda},
			},
			Transmitters: []types.Account{
				"0x033c95af529827a2372743bfc820b4d0bd08605fda5e089d1a7ad3a33caa48fc",
				"0x05e457e084ff8e7279985ffb7ad7a65a6adfa8485e7d5d615c015268d5aa9971",
				"0x0692a71d868ee9fc22091d8f73c16dabaf9219fa74c4bcc7d385f398949ba8d2",
				"0x01232b74b82e490f373453baebe7e217cc6d33d798824a04f8274fa83bc2acd4",
				"0x016715b5cc943835f196b7caf5a8aeb0e85b3f975dc43c14c90d0376e87eead1",
			},
			F:                     0x1,
			OnchainConfig:         []uint8{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xb7, 0x89, 0x18, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x17, 0x48, 0x76, 0xe8, 0x0},
			OffchainConfigVersion: 0x2,
			OffchainConfig:        []uint8{0x8, 0x80, 0xa0, 0xd9, 0xe6, 0x1d, 0x10, 0x80, 0xd8, 0x8e, 0xe1, 0x6f, 0x18, 0x80, 0xbc, 0xc1, 0x96, 0xb, 0x20, 0x80, 0xca, 0xb5, 0xee, 0x1, 0x28, 0x80, 0x90, 0xdf, 0xc0, 0x4a, 0x30, 0x5, 0x3a, 0x2, 0x1, 0x2, 0x42, 0x20, 0xe9, 0x4f, 0x24, 0x4a, 0xcd, 0x86, 0x7d, 0xa5, 0x72, 0x54, 0x35, 0x57, 0x82, 0xb7, 0x1d, 0xb4, 0x50, 0x83, 0xd3, 0x67, 0xa7, 0xef, 0x23, 0x71, 0x5e, 0xb5, 0xce, 0x64, 0x38, 0xdf, 0x16, 0x1b, 0x42, 0x20, 0x34, 0xb6, 0xb5, 0xd, 0x9a, 0x47, 0xa2, 0x25, 0xe7, 0x91, 0xb3, 0x67, 0x7a, 0x1e, 0xd, 0x12, 0x2b, 0xa0, 0xc, 0xe9, 0x60, 0xd3, 0x7c, 0x76, 0x46, 0xec, 0x84, 0xcd, 0xd6, 0xfa, 0x9c, 0x48, 0x42, 0x20, 0x6a, 0xbc, 0xb4, 0x9d, 0xc7, 0xf4, 0xa9, 0x2f, 0xc4, 0x50, 0x89, 0x82, 0xa8, 0xa, 0xc1, 0x54, 0x23, 0x79, 0x8a, 0x2d, 0xe, 0x47, 0x1e, 0x95, 0xf4, 0x1e, 0x30, 0xeb, 0x68, 0x85, 0x29, 0xa6, 0x42, 0x20, 0x9b, 0xab, 0xa6, 0x36, 0x27, 0xbf, 0xa5, 0x31, 0x26, 0x9f, 0x32, 0x40, 0xb4, 0xc4, 0xe9, 0x8e, 0x86, 0xbc, 0xd5, 0x99, 0x83, 0xc5, 0x27, 0x31, 0x5f, 0x7a, 0xd1, 0x2f, 0x51, 0x5d, 0xd8, 0xfc, 0x42, 0x20, 0x72, 0xd7, 0x97, 0xfe, 0x3c, 0x8, 0xd8, 0x97, 0xfe, 0xe8, 0xdd, 0xa3, 0xa9, 0x40, 0x66, 0xa3, 0x4d, 0xa7, 0x27, 0x81, 0x4f, 0xf, 0x1f, 0x6c, 0x72, 0x22, 0xba, 0xdc, 0x52, 0x18, 0xcf, 0xb2, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x45, 0x7a, 0x66, 0x67, 0x38, 0x70, 0x32, 0x71, 0x58, 0x42, 0x38, 0x74, 0x77, 0x37, 0x6b, 0x42, 0x59, 0x72, 0x76, 0x75, 0x4d, 0x6e, 0x75, 0x47, 0x70, 0x66, 0x75, 0x79, 0x71, 0x59, 0x67, 0x4a, 0x50, 0x76, 0x78, 0x70, 0x77, 0x69, 0x62, 0x73, 0x50, 0x68, 0x67, 0x5a, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4c, 0x5a, 0x4a, 0x58, 0x71, 0x44, 0x59, 0x56, 0x32, 0x48, 0x45, 0x53, 0x35, 0x4a, 0x76, 0x6b, 0x4b, 0x35, 0x72, 0x6f, 0x65, 0x39, 0x77, 0x67, 0x44, 0x38, 0x4c, 0x67, 0x6d, 0x73, 0x69, 0x36, 0x51, 0x69, 0x71, 0x6a, 0x6d, 0x46, 0x31, 0x4b, 0x38, 0x38, 0x4d, 0x57, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x39, 0x73, 0x45, 0x63, 0x45, 0x33, 0x50, 0x32, 0x79, 0x6d, 0x4b, 0x39, 0x42, 0x5a, 0x50, 0x45, 0x51, 0x43, 0x47, 0x35, 0x6d, 0x6f, 0x67, 0x59, 0x4b, 0x48, 0x63, 0x68, 0x71, 0x48, 0x53, 0x69, 0x57, 0x52, 0x45, 0x4c, 0x68, 0x4a, 0x52, 0x5a, 0x32, 0x69, 0x69, 0x56, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x45, 0x33, 0x56, 0x76, 0x4b, 0x79, 0x47, 0x70, 0x6d, 0x74, 0x52, 0x36, 0x55, 0x48, 0x6b, 0x51, 0x45, 0x75, 0x31, 0x43, 0x73, 0x70, 0x51, 0x47, 0x78, 0x4c, 0x67, 0x55, 0x56, 0x77, 0x4b, 0x64, 0x4c, 0x64, 0x4b, 0x46, 0x71, 0x4a, 0x35, 0x4e, 0x52, 0x74, 0x47, 0x74, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x52, 0x6b, 0x62, 0x7a, 0x79, 0x6b, 0x41, 0x48, 0x38, 0x4b, 0x55, 0x48, 0x57, 0x69, 0x52, 0x77, 0x66, 0x31, 0x45, 0x73, 0x55, 0x33, 0x46, 0x65, 0x67, 0x37, 0x73, 0x53, 0x57, 0x42, 0x65, 0x56, 0x43, 0x6b, 0x77, 0x6e, 0x4e, 0x57, 0x46, 0x57, 0x74, 0x36, 0x5a, 0x73, 0x52, 0x0, 0x60, 0x80, 0x94, 0xeb, 0xdc, 0x3, 0x68, 0x80, 0x84, 0xaf, 0x5f, 0x70, 0x80, 0x84, 0xaf, 0x5f, 0x78, 0x80, 0x84, 0xaf, 0x5f, 0x82, 0x1, 0x9e, 0x1, 0xa, 0x20, 0x54, 0x42, 0xd5, 0xda, 0xdc, 0x41, 0xfc, 0xf, 0xf1, 0xca, 0xc, 0x31, 0x37, 0x72, 0xe3, 0xed, 0xb7, 0xb7, 0xfd, 0x1e, 0x79, 0x49, 0x5b, 0x8e, 0xa6, 0x69, 0x94, 0xb6, 0x7e, 0xf9, 0xed, 0x40, 0x12, 0x20, 0x62, 0x28, 0x9f, 0xaf, 0xb1, 0x57, 0xd5, 0x85, 0x2a, 0xb2, 0x6c, 0x41, 0x3f, 0xf2, 0xb8, 0x41, 0x45, 0x9b, 0x80, 0x2c, 0x30, 0xe2, 0x4d, 0xf5, 0xf7, 0x9e, 0x85, 0x9c, 0xff, 0xc, 0x21, 0xb4, 0x1a, 0x10, 0x26, 0xbd, 0x1f, 0x5e, 0x13, 0xa5, 0x3d, 0x8b, 0xc2, 0xaf, 0xc1, 0x73, 0x33, 0x6c, 0xa5, 0xa4, 0x1a, 0x10, 0xe, 0x7a, 0xe, 0x77, 0x3a, 0xec, 0x57, 0x35, 0x1d, 0xb7, 0xc, 0xf0, 0x7f, 0x86, 0x74, 0x1, 0x1a, 0x10, 0x45, 0xaa, 0x20, 0x68, 0x4b, 0x49, 0x97, 0x3a, 0x26, 0x22, 0x18, 0x77, 0x9f, 0x67, 0x93, 0x72, 0x1a, 0x10, 0x1c, 0x4d, 0xd7, 0x4a, 0x54, 0xb2, 0xd, 0x92, 0x7, 0xec, 0xcd, 0x95, 0xe6, 0xd4, 0xaf, 0x91, 0x1a, 0x10, 0xea, 0x76, 0xae, 0x49, 0x62, 0x87, 0xef, 0xb7, 0x12, 0x60, 0xfb, 0xd6, 0x13, 0xfe, 0x48, 0xcb},
		},
		BlockNumber:             0xe07,
		Transmitter:             types.Account("0x16715b5cc943835f196b7caf5a8aeb0e85b3f975dc43c14c90d0376e87eead1"),
		LinkBalance:             bigIntFromString("100000000000000000000"),
		LinkAvailableForPayment: bigIntFromString("99999991552000000000"),
		JuelsPerFeeCoin:         big.NewInt(451000),
		AggregatorRoundID:       0xf5b,
	}
)

func bigIntFromString(s string) *big.Int {
	out, _ := new(big.Int).SetString(s, 10)
	return out
}
