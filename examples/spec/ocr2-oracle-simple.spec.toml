type                 = "offchainreporting2"
pluginType           = "median"
schemaVersion        = 1
relay                = "starknet"
name                 = "<insert job name here>"
contractID           = "<insert starknet ocr2 contract ID/address>"
p2pBootstrapPeers    = ["somep2pkey@localhost-tcp:port"]      # optional, overrides P2PV2_BOOTSTRAPPERS
p2pPeerID            = "<insert p2p id>"                      # optional, overrides P2P_PEER_ID
ocrKeyBundleID       = "<insert starknet ocr2 key bundle id>" # optional, overrides OCR2_KEY_BUNDLE_ID
transmitterID        = "<insert starknet transmitter key id>"
observationSource    = """
    // data source 1
    ds1          [type="bridge" name="bridge-coingecko" requestData=<{"data": {"from":"LINK","to":"USD"}}>]
    ds1_parse    [type="jsonparse" path="result"]
    ds1_multiply [type="multiply" times=100000000]
    ds1 -> ds1_parse -> ds1_multiply
"""

[pluginConfig]
juelsPerFeeCoinSource = """
    // Fetch the LINK price from a data source
    // data source 1
    ds1_link       [type="bridge" name="bridge-coingecko" requestData=<{"data": {"from":"LINK","to":"USD"}}>]
    ds1_link_parse [type="jsonparse" path="result"]
    ds1_link -> ds1_link_parse -> divide

    // Fetch the ETH price from a data source
    // data source 1
    ds1_coin       [type="bridge" name="bridge-coingecko" requestData=<{"data": {"from":"ETH","to":"USD"}}>]
    ds1_coin_parse [type="jsonparse" path="result"]
    ds1_coin -> ds1_coin_parse -> divide

    // ds1_link_parse (dollars/LINK)
    // ds1_coin_parse (dollars/ETH)
    // ds1_coin_parse / ds1_link_parse = LINK/ETH
    divide [type="divide" input="$(ds1_coin_parse)" divisor="$(ds1_link_parse)" precision="18"]
    scale  [type="multiply" times=1000000000000000000]

    divide -> scale
"""

[relayConfig]
chainID        = "goerli-alpha-4"
accountAddress = "<insert account contract address>"
nodeName       = "goerli-alpha-4-node-1" # optional, defaults to random node with 'chainID'
