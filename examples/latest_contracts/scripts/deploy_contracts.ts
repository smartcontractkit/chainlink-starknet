import { CairoAssembly, CallData, Contract } from 'starknet'
import { loadContract, createDeployerAccount, loadContractPath, makeProvider } from './utils'
import fs from 'fs'
import dotenv from 'dotenv'
import { json } from 'starknet'

// Compiled class hash generated by sequencer. TODO: generate via starknet-sierra-compile in CI

const AGGREGATOR = 'MockAggregator'
const AGGREGATOR_COMPILED_CLASS_HASH = '0x11c8d3418439bc8717aac1914fc1c813f28238e94c36a50e66f2211626d4f19'

const CONSUMER = 'AggregatorConsumer'
const CONSUMER_COMPILED_CLASS_HASH = '0x11c8d3418439bc8717aac1914fc1c813f28238e94c36a50e66f2211626d4f19'

const UPTIME_FEED_PATH = '../../../contracts/target/release/chainlink_SequencerUptimeFeed'
const UPTIME_FEED_COMPILED_CLASS_HASH = '0x4cbf19c7f6c9129b66ed8864e9094ee28c40bea4a74c8ef81a7726fefb45347'

const PRICE_CONSUMER = 'AggregatorPriceConsumerWithSequencer'
const PRICE_CONSUMER_COMPILED_CLASS_HASH = '0x7f3b98474d72a373239c37d595daed48de0aa77afc0f5647fd2a83f37350b4d'

const DECIMALS = '18'

dotenv.config({ path: __dirname + '/../.env' })

export async function deployContract() {
  const provider = makeProvider()
  const AggregatorArtifact = loadContract(AGGREGATOR)
  const ConsumerArtifact = loadContract(CONSUMER)
  const PriceConsumerArtifact = loadContract(PRICE_CONSUMER)
  const UptimeFeedArtifact = loadContractPath(UPTIME_FEED_PATH)

  const account = createDeployerAccount(provider)

  console.log(account.address);

  const declareDeployAggregator = await account.declareAndDeploy({
    compiledClassHash: AGGREGATOR_COMPILED_CLASS_HASH,
    contract: AggregatorArtifact,
    constructorCalldata: [DECIMALS],
  })

  const aggregatorDeploy = new Contract(
    AggregatorArtifact.abi,
    declareDeployAggregator.deploy.contract_address,
    provider,
  )

  const declareDeployConsumer = await account.declareAndDeploy({
    compiledClassHash: '0x62fca8c39693abb3775794a2e0d9be5dda2b4baa3be42391b616caa7ebd71a7',
    contract: ConsumerArtifact,
    constructorCalldata: [aggregatorDeploy.address as string],
  })

  const consumerDeploy = new Contract(
    ConsumerArtifact.abi,
    declareDeployConsumer.deploy.contract_address,
    provider,
  )

  const declareDeployUptimeFeed = await account.declareAndDeploy({
    compiledClassHash: UPTIME_FEED_COMPILED_CLASS_HASH,
    contract: UptimeFeedArtifact,
    constructorCalldata: ['0', account.address],
  })

  const uptimeFeedDeploy = new Contract(
    UptimeFeedArtifact.abi,
    declareDeployUptimeFeed.deploy.contract_address,
    provider,
  )

  const declareDeployPriceConsumer = await account.declareAndDeploy({
    compiledClassHash: PRICE_CONSUMER_COMPILED_CLASS_HASH,
    contract: PriceConsumerArtifact,
    constructorCalldata: [uptimeFeedDeploy.address as string, aggregatorDeploy.address as string],
  })

  const priceConsumerDeploy = new Contract(
    PriceConsumerArtifact.abi,
    declareDeployPriceConsumer.deploy.contract_address,
    provider,
  )

  fs.appendFile(__dirname + '/../.env', '\nCONSUMER=' + consumerDeploy.address, function (err) {
    if (err) throw err
  })
  fs.appendFile(__dirname + '/../.env', '\nMOCK=' + aggregatorDeploy.address, function (err) {
    if (err) throw err
  })
  fs.appendFile(
    __dirname + '/../.env',
    '\nPRICE_CONSUMER=' + priceConsumerDeploy.address,
    function (err) {
      if (err) throw err
    },
  )
  fs.appendFile(__dirname + '/../.env', '\nUPTIME_FEED=' + uptimeFeedDeploy.address, function (
    err,
  ) {
    if (err) throw err
  })
}

deployContract()
