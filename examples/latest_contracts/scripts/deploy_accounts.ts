import fs from 'fs'
import dotenv from 'dotenv'
import { starknet } from 'hardhat'
import { OpenZeppelinAccount } from '@shardlabs/starknet-hardhat-plugin/dist/src/account'
import { exit } from 'node:process';
import { PredeployedAccount } from '@shardlabs/starknet-hardhat-plugin/dist/src/devnet-utils';
import { loadContract_Account, makeProvider } from './utils';
import { Account, CallData, ec, hash } from 'starknet';

const ENV_PATH = __dirname + '/../.env'

dotenv.config({ path: ENV_PATH })

interface UserAccount {
    address: string
    privateKey: string
}

export async function fetchAccount() {
    const account = await createAccount()

    try {
        fs.appendFileSync(ENV_PATH, '\n# Autogenerated Dev Account from ./scripts/deploy_account.ts')
        fs.appendFileSync(ENV_PATH, '\nDEPLOYER_ACCOUNT_ADDRESS=' + account.address)
        fs.appendFileSync(ENV_PATH, '\nDEPLOYER_PRIVATE_KEY=' + account.privateKey)
    } catch (err) {
        throw err
    }

    exit(0); // must manually exit due to ts-node weirdness
}

async function createAccount(): Promise<UserAccount> {
    // use pre-deployed accounts to deploy new OZ account
    const accounts = await starknet.devnet.getPredeployedAccounts()
    const account = accounts[0]
    const provider = makeProvider()
    const fundedAccount = new Account(provider, account.address, account.private_key)

    // define account parameters
    const OZaccountClassHash = '0x4d07e40e93398ed3c76981e72dd1fd22557a78ce36c0515f679e27f0bb5bc5f'
    const compiledAccount = loadContract_Account("Account")
    const privateKey = ec.starkCurve.utils.randomPrivateKey()
    const starkKeyPub = ec.starkCurve.getStarkKey(privateKey)
    const OZaccountConstructorCallData = CallData.compile({ publicKey: starkKeyPub })

    // declare OZ account
    const declareTx = await fundedAccount.declare({
        classHash: OZaccountClassHash,
        contract: compiledAccount,
    })
    console.log('Declare new Account...')
    await provider.waitForTransaction(declareTx.transaction_hash)

    // fund OZ account
    const OZcontractAddress = hash.calculateContractAddressFromHash(
        starkKeyPub,
        OZaccountClassHash,
        OZaccountConstructorCallData,
        0
    )
    console.log('hash calculation contract address', OZcontractAddress)
    await starknet.devnet.mint(OZcontractAddress, 1e22, true)

    // // deploy
    const OZaccount = new Account(provider, OZcontractAddress, privateKey)

    const { transaction_hash, contract_address } = await OZaccount.deployAccount({
        classHash: OZaccountClassHash,
        constructorCalldata: OZaccountConstructorCallData,
        addressSalt: starkKeyPub
    })

    console.log('Waiting for Tx to be Accepted on Starknet - OZ Account Deployment...')
    await provider.waitForTransaction(transaction_hash)

    console.log('actual contract address', contract_address)

    return { address: contract_address, privateKey: '0x' + Buffer.from(privateKey).toString('hex') }
}

fetchAccount()

